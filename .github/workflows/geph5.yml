name: geph5
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check-version.outputs.new_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Get latest tag
        uses: actions/github-script@v7
        id: get-tag
        with:
          result-encoding: string
          script: |
              const { data: latestRelease } = await github.rest.repos.getLatestRelease({
                owner: 'geph-official',
                repo: 'geph5',
              })
              if (latestRelease.tag_name.startsWith('geph5-client-'))
                return latestRelease.tag_name.slice(13)
              return latestRelease.tag_name

      - name: Check new version
        id: check-version
        run: |
          tag=$(cat repo/geph5)
          new=${{ steps.get-tag.outputs.result }}
          if [[ $tag != $new ]]
          then
            echo $new > repo/geph5
            echo "new_version=$new" >> $GITHUB_OUTPUT
            cd repo
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m $new
            git push
          fi

      - name: Delete Old Release
        uses: actions/github-script@v7
        with:
          script: |
            let release
            try {
              release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'geph5'
              })
            } catch(e) {
              console.error(e)
              return
            }
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id
            })
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/'+release.data.tag_name
            })

  build:
    runs-on: ${{ matrix.os }}
    needs: check
    if: needs.check.outputs.new_version
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows-amd64
          - os: ubuntu-latest
            name: linux-amd64
          - os: macos-latest
            name: macos-arm64
    steps:
      - name: Build
        shell: bash
        run: |
          mkdir -p release
          git clone https://github.com/geph-official/geph5
          cd geph5/binaries/geph5-client
          cargo update
          cargo build --release --locked

      - name: Move client binary (non-Windows)
        if: matrix.os != 'windows-latest'
        run: mv geph5/target/release/geph5-client release/geph5-client-${{ matrix.name }}

      - name: Move client binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: mv geph5/target/release/geph5-client.exe release/geph5-client-${{ matrix.name }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-latest
          path: release/geph5-client*

  release:
    runs-on: ubuntu-latest
    needs: [ check, build ]
    if: needs.check.outputs.new_version
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: geph5
          name: geph5 - ${{ needs.check.outputs.new_version }}
          body: geph5 - ${{ needs.check.outputs.new_version }}
          files: artifacts/*

      - name: Send notify
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: ${{ secrets.SERVER }}
          server_port: 587
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          subject: geph5 - ${{ needs.check.outputs.new_version }}
          body: geph5 - ${{ needs.check.outputs.new_version }}
          from: Github Actions
          to: ${{ secrets.TO }}
