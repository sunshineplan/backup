name: geph4
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'

jobs:
  geph4:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check-version.outputs.new_version }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Get latest tag
        uses: actions/github-script@v7
        id: get-tag
        with:
          result-encoding: string
          script: |
              const tags = await github.rest.repos.listTags({
                owner: 'geph-official',
                repo: 'geph4-client',
              })
              return tags.data[0].name

      - name: Check new version
        id: check-version
        run: |
          tag=$(cat repo/geph)
          if [[ $tag != ${{ steps.get-tag.outputs.result }} ]]
          then
            echo ${{ steps.get-tag.outputs.result }} > repo/geph
            echo "new_version=1" >> $GITHUB_OUTPUT
            cd repo
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m "${{ steps.get-tag.outputs.result }}"
            git push
          else
            echo "new_version=0" >> $GITHUB_OUTPUT
          fi

      - name: Delete Old Release
        if: steps.check-version.outputs.new_version == 1
        uses: actions/github-script@v7
        with:
          script: |
            let release
            try {
              release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'geph4'
              })
            } catch(e) {
              console.error(e)
              return
            }
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id
            })
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/'+release.data.tag_name
            })

      - name: Send notify
        if: steps.check-version.outputs.new_version == 1
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SERVER }}
          server_port: 587
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          subject: geph4 - ${{ steps.get-tag.outputs.result }}
          body: geph4 - ${{ steps.get-tag.outputs.result }}
          from: Github Actions
          to: ${{ secrets.TO }}

      - name: Create Release
        id: release
        if: steps.check-version.outputs.new_version == 1
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: geph4
          name: geph4
          body: geph4 - ${{ steps.get-tag.outputs.result }}

  build:
    needs: geph4
    if: ${{ needs.geph4.outputs.new_version == 1 }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows-amd64
          - os: ubuntu-latest
            name: linux-amd64
          - os: macos-latest
            name: macos-arm64
    steps:
      - if: matrix.os == 'windows-latest'
        name: Setup Rust
        run: |
          rustup default stable-i686-pc-windows-msvc
          rustup update

      - name: Build
        shell: bash
        run: |
          mkdir -p release
          git clone https://github.com/geph-official/geph4-client
          cd geph4-client
          cargo update
          cargo build --release --locked

      - name: Move client binary (non-Windows)
        if: matrix.os != 'windows-latest'
        run: mv geph4-client/target/release/geph4-client release/geph4-client-${{ matrix.name }}

      - name: Move client binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: mv geph4-client/target/release/geph4-client.exe release/geph4-client-${{ matrix.name }}.exe

      - name: Upload Release Asset
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.geph4.outputs.upload_url }}
          asset_path: release/geph4-client*
